<div class="composition">
  <div>
    <ul>
      <li><h1><%= @composition.title %></h1></li>
      <%# <li><p>Key signature: <%= @composition.key_signature %></p></li>
      <%# <li><p>Genre: <%= @composition.style %></p></li>
    </ul>
  </div>


<div id="records">
  <button id="record" ><i class="fa-solid fa-record-vinyl"></i>&nbsp Enregistrer</button>
  <button id="stop" ><i class="fa-solid fa-stop"></i>&nbsp Stop</button>
  <audio controls ></audio>
  <a id="download" href="" download><i class="fa-solid fa-download"></i>&nbsp Télécharger</a>
</div>


  <div class="composition players">
    <% audio_files = [
      { src: "/audios/Amin_1bar.mp3", id: "snd1" },
      { src: "/audios/Amin7_2bar.mp3", id: "snd2" },
      { src: "/audios/Bmin7_1bar.mp3", id: "snd3" },
      { src: "/audios/Bmin7_2bar.mp3", id: "snd4" },
      { src: "/audios/Bmin9_2bar.mp3", id: "snd5" },
      { src: "/audios/Cmaj7_2bar.mp3", id: "snd6" },
      { src: "/audios/Gadd2_1bar.mp3", id: "snd7" },
      { src: "/audios/Gmaj7_1bar.mp3", id: "snd8" },
      { src: "/audios/Gmaj7_2bar.mp3", id: "snd9" }
    ] %>

    <% audio_files.each do |audio| %>
      <% filename = File.basename(audio[:src], File.extname(audio[:src])) %>
      <button class="audio-button" onclick="document.getElementById('<%= audio[:id] %>').play()">
        <i class="fa-solid fa-circle-play"></i>
        <div><%= filename %></div>
      </button>
      <audio id="<%= audio[:id] %>">
        <source src="<%= audio[:src] %>" type="audio/mp3">
      </audio>
    <% end %>
  </div>

  <script>
    document.addEventListener('turbo:load', () => {
      const recButton = document.getElementById('record');
      const stopButton = document.getElementById('stop');
      const downloadLink = document.getElementById('download');
      const audioElement = document.querySelector("audio");
      let mediaRecorder;
      let audioChunks = [];
      let audioContext;
      let destination;
      let sourceNodes = [];

      if (recButton && !recButton.hasEventListener) {
        recButton.addEventListener('click', async () => {
          audioContext = new AudioContext();
          destination = audioContext.createMediaStreamDestination();
          mediaRecorder = new MediaRecorder(destination.stream);
          mediaRecorder.start();
          recButton.style.color = "red";
          recButton.textContent = "En cours...";
          audioChunks = [];

          const audioArray = [
            document.getElementById('snd1'),
            document.getElementById('snd2'),
            document.getElementById('snd3'),
            document.getElementById('snd4'),
            document.getElementById('snd5'),
            document.getElementById('snd6'),
            document.getElementById('snd7'),
            document.getElementById('snd8'),
            document.getElementById('snd9')
          ];

          audioArray.forEach(audio => {
            const source = audioContext.createMediaElementSource(audio);
            source.connect(destination);
            source.connect(audioContext.destination);
            sourceNodes.push(source);
          });

          mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
          };

          mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            const arrayBuffer = await audioBlob.arrayBuffer();
            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
            const wavBlob = await audioBufferToWav(audioBuffer);
            const audioURL = URL.createObjectURL(wavBlob);
            audioElement.src = audioURL;
            downloadLink.href = audioURL;
            downloadLink.download = 'recording.wav';
            recButton.style.color = "";
            recButton.innerHTML = '<i class="fa-solid fa-record-vinyl"></i>&nbsp Enregistrer';
          };
        });

        recButton.hasEventListener = true; // Prevent duplicate listeners
      }

      if (stopButton) {
        stopButton.addEventListener('click', () => {
          if (mediaRecorder) mediaRecorder.stop();
        });
      }
    });

    async function audioBufferToWav(audioBuffer) {
      const numOfChan = audioBuffer.numberOfChannels,
        length = audioBuffer.length * numOfChan * 2 + 44,
        buffer = new ArrayBuffer(length),
        view = new DataView(buffer),
        channels = [],
        sampleRate = audioBuffer.sampleRate,
        format = 1;

      writeUTFBytes(view, 0, 'RIFF');
      view.setUint32(4, 44 + audioBuffer.length * numOfChan * 2, true);
      writeUTFBytes(view, 8, 'WAVE');
      writeUTFBytes(view, 12, 'fmt ');
      view.setUint32(16, 16, true);
      view.setUint16(20, format, true);
      view.setUint16(22, numOfChan, true);
      view.setUint32(24, sampleRate, true);
      view.setUint32(28, sampleRate * 2 * numOfChan, true);
      view.setUint16(32, numOfChan * 2, true);
      view.setUint16(34, 16, true);
      writeUTFBytes(view, 36, 'data');
      view.setUint32(40, audioBuffer.length * numOfChan * 2, true);

      for (let i = 0; i < audioBuffer.numberOfChannels; i++) {
        channels.push(audioBuffer.getChannelData(i));
      }

      let offset = 44;
      for (let i = 0; i < audioBuffer.length; i++) {
        for (let j = 0; j < numOfChan; j++) {
          const sample = Math.max(-1, Math.min(1, channels[j][i]));
          view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
          offset += 2;
        }
      }

      return new Blob([buffer], { type: 'audio/wav' });
    }

    function writeUTFBytes(view, offset, string) {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    }
  </script>

  <h6><%= link_to "Retour", compositions_path %></h6>
</div>
